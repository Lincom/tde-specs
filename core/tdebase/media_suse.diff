Index: kioslave/media/mediamanager/halbackend.cpp
===================================================================
--- kioslave/media/mediamanager/halbackend.cpp.orig
+++ kioslave/media/mediamanager/halbackend.cpp
@@ -280,13 +280,13 @@ void HALBackend::AddDevice(const char *u
             }
         }
         
-	// instert medium into list
+	// insert medium into list
 	m_mediaList.addMedium(medium, allowNotification);
 
 	// finally check for automount
         TQMap<TQString,TQString> options = MediaManagerUtils::splitOptions(mountoptions(udi));
         kdDebug() << "automount " << options["automount"] << endl;
-        if (options["automount"] == "true" && allowNotification ) {
+        if (options["automount"] == "true" ) {
             TQString error = mount(medium);
             if (!error.isEmpty())
                 kdDebug() << "error " << error << endl;
@@ -327,6 +327,12 @@ void HALBackend::AddDevice(const char *u
         m_mediaList.addMedium(medium, allowNotification);
         return;
     }
+
+    if ( allowNotification ) {
+        KProcess proc;
+        proc << "suseplugger" << udi;
+        proc.start(KProcess::DontCare);
+    }
 }
 
 void HALBackend::RemoveDevice(const char *udi)
@@ -969,7 +975,10 @@ TQStringList HALBackend::mountoptions(co
     bool value;
     if (use_defaults)
     {
-	value = config.readBoolEntry("automount", false);
+    value = removable;
+    QString drive_type = libhal_device_get_property_QString( m_halContext, drive_udi.latin1(), "storage.drive_type" );
+    value |= ( drive_type == "cdrom" );
+	value = config.readBoolEntry("automount", value);
     }
     else
     {
